* Emacs Configurations
** some default settings
#+BEGIN_SRC emacs-lisp
;; base config
(setq load-prefer-newer t)
(setq gc-cons-threshold 50000000)
(setq large-file-warning-threshold 100000000)
(setq inhibit-compacting-font-caches t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
;;(global-linum-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)
;;(setq-default mode-line-format nil)
(setq ring-bell-function 'ignore)
(setq inhibit-splash-screen -1)
(setq auto-save-default nil)
(setq make-backup-files nil)
(setq shell-command-switch "-ic")
(prefer-coding-system 'utf-8-unix)
(setq initial-scratch-message (concat ";;Happy hacking, " user-login-name "\n\n"))
(setq custom-file "~/.emacs.d/lisp/custom.el")
(load custom-file)
(setq-default abbrev-mode t)
(setq-default my-lisp-path "~/.emacs.d/lisp/")
(add-to-list 'exec-path "~/bin/")
(add-to-list 'load-path my-lisp-path)
(set-frame-parameter (selected-frame) 'alpha '(85 . 95))
(add-to-list 'default-frame-alist '(alpha . (85 . 95)))
(set-face-attribute 'default nil :height 120)
(put 'erase-buffer 'disabled nil)
#+END_SRC
** Packages and elpa configurations
*** elpa
#+BEGIN_SRC emacs-lisp
					  ;init packages
  (when (>= emacs-major-version 24)
    (setq package-archives '(("gnu" . "http://elpa.emacs-china.org/gnu/")
			     ("melpa" . "http://elpa.emacs-china.org/melpa/"))))
#+END_SRC
*** custom packages
#+BEGIN_SRC emacs-lisp
  (defvar stanhe/packages '(
			    ;; ========basic=======
			    use-package
			    benchmark-init
			    neotree
			    ace-window
			    company
			    hungry-delete
			    counsel
			    evil
			    hydra
			    general
			    smartparens
			    which-key
			    window-numbering
			    popwin
			    counsel-projectile
			    quickrun
			    ) "My default packages")

#+END_SRC
*** check and install 
#+BEGIN_SRC emacs-lisp
  (require 'cl)

  (setq package-selected-packages stanhe/packages)

  (defun stanhe/packages-install-p ()
    (loop for pkg in stanhe/packages
	  when (not (package-installed-p pkg)) do (return nil)
	  finally (return t)))

  (unless (stanhe/packages-install-p)
    (message "%s" "Refreshing package database...")
    (package-refresh-contents)
    (dolist (pkg stanhe/packages)
      (when (not (package-installed-p pkg))
	(package-install pkg))))
#+END_SRC

*** packages settings and keybindings
#+BEGIN_SRC emacs-lisp
  ;;(load-theme 'monokai 1)
  (require 'use-package)
  (require 'my-abbrev)

  (use-package benchmark-init
    :ensure t
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))

  (use-package evil
    :defer 1
    :init
    (general-evil-setup t)
    :config 
    (evil-mode 1)
    (nvmap :prefix "SPC"
      "a" 'sth-adb/body
      "q" 'quit-window
      "p" 'projectile-command-map
      "c" 'compile
      "SPC" 'random-color-theme
      "rr" 'quickrun-shell
      "ra" 'quickrun-with-arg
      "o" 'sth-open-win-application
      "bk" 'kill-buffer
      "bs" 'ivy-switch-buffer
      "bb" 'back-to-previous-buffer
      "s" 'show-me-the-colors
      "m" 'counsel-load-theme
      "n" 'display-line-numbers-mode
      "g" 'gbash
      "e" 'eval-current-line
      "df" 'sth-defun
      "fb" 'open-file-browse
      "ff" 'sth-find-file
      "fw" 'sth-open-in-wsl
      "fr" 'counsel-recentf
      "fs" 'save-buffer
      "x" 'counsel-M-x
      "y" 'sth-copy-word
      ;;"o" 'open-win-application
      )
    (nvmap :prefix ","
      "p" 'projectile-command-map
      "v" 'evil-visual-block

      "x1" 'delete-other-windows
      "xo" 'other-window
      "x0" 'delete-window
      "xq" 'delete-window
      "x2" 'split-window-below
      "x3" 'split-window-right
      "xf" 'sth-find-file
      "xm" 'counsel-M-x
      "xr" 'counsel-recentf
      "xb" 'ivy-switch-buffer
      "bb" 'back-to-previous-buffer
      "xB" 'list-buffers
      "xd" 'dired
      "xj" 'dired-jump
      "xp" 'image-dired
      "xs" 'save-buffer
      "xc" 'save-buffers-kill-terminal
      "xk" 'kill-buffer
      "xe" 'eval-last-sexp

      "eb" 'eval-buffer
      "aw" 'ace-swap-window
      "ag" 'counsel-ag
      "gb" 'gbash
      "gf" 'counsel-git
					  ;"gs" 'magit-status
      "gg" 'counsel-git-grep
      "go" 'counsel-git-log
					  ;"gl" 'magit-log-current
      "gt" 'gradle-task
      "gr" 'gradle-run
      "oa" 'org-agenda

      "nf" 'neotree-find
      "nt" 'neotree-toggle
      )
    )

  (use-package hydra
    :defer 3
    :config
    (defhydra custom (global-map "<f2>")
      "functions"
      ("o" open-win-application "open app" :color blue)
      ("q" keyboard-quit "quit" :color blue)
      ("j" text-scale-increase "increase-text-size")
      ("d" text-scale-decrease "decrease-text-size")
      ("r" (text-scale-set 0) "reset text" :color blue)
      ("n" neotree-toggle "neotree" :color blue)
      ("m" eshell-pop-toggle "eshell" :color blue)
      ("p" back-to-previous-buffer "swap-last" :color blue)
      ("k" kill-buffer "kill-buffer" :color blue)
      ("b" ivy-switch-buffer "switch-buffer" :color blue)
      ("l" fast-eshell-pop "eshell" :color blue)
      ("f" find-desk-file "browse" :color blue)
      ("t" sth-fast-bash "git bash" :color blue)
      ("SPC" delete-other-windows "single window" :color blue)

      ("-" shrink-window-if-larger-than-buffer "shrink-if-larger" :color blue)
      ("=" balance-windows "balance-window" :color blue)
      ("<up>" enlarge-window "enlarge-window")
      ("<down>" shrink-window "balance-window")
      ("<left>" shrink-window-horizontally "shrink-horizontal")
      ("<right>" enlarge-window-horizontally "enlarge-horizontal")
      ("<f4>" shut-down-win "shut-down" :color blue)
      )
    (defhydra sth-org (global-map "<f5>")
      "efficiency"
      ("o" show-my-okr "OKR" :color blue)
      ("k" org-agenda-list "agenda" :color blue)
      ("r" show-my-gtd "OKR-detail" :color blue)
      )
    (defhydra sth-adb (:color pink
			  :hint nil)
      "
  ^Home^             ^Input^           ^Delete^          ^Action
  ^^^^^^^^-----------------------------------------------------------------
  _h_: home          _i_: input        _d_: delete       _e_: enter
  _b_: back          _c_: cmd          _m_: multDelete   _n_: next
  ^ ^                _r_: cycleInput
  "
      ("h" adb-home)
      ("b" adb-back)
      ("i" adb-input-enter)
      ("r" adb-cycle-input-enter)
      ("c" adb-cmd)
      ("d" adb-sigle-del)
      ("m" adb-mult-del)
      ("e" adb-enter)
      ("n" adb-next)
      ("q" nil "cancel")
      )
    (defhydra hydra-buffer-menu (:color pink
					:hint nil)
      "
  ^Mark^             ^Unmark^           ^Actions^          ^Search
  ^^^^^^^^-----------------------------------------------------------------
  _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
  _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
  _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
  _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
  _~_: modified
  "
      ("m" Buffer-menu-mark)
      ("u" Buffer-menu-unmark)
      ("U" Buffer-menu-backup-unmark)
      ("d" Buffer-menu-delete)
      ("D" Buffer-menu-delete-backwards)
      ("s" Buffer-menu-save)
      ("~" Buffer-menu-not-modified)
      ("x" Buffer-menu-execute)
      ("b" Buffer-menu-bury)
      ("g" revert-buffer)
      ("T" Buffer-menu-toggle-files-only)
      ("O" Buffer-menu-multi-occur :color blue)
      ("I" Buffer-menu-isearch-buffers :color blue)
      ("R" Buffer-menu-isearch-buffers-regexp :color blue)
      ("c" nil "cancel")
      ("v" Buffer-menu-select "select" :color blue)
      ("o" Buffer-menu-other-window "other-window" :color blue)
      ("q" quit-window "quit" :color blue))

    (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)
    )

  (use-package neotree
    :defer 3
    :config
    (setq neo-smart-open t)
    (nvmap :status '(normal emacs)
      :keymaps 'neotree-mode-map
      "s" 'neotree-hidden-file-toggle
      "g" 'neotree-refresh
      "d" 'neotree-delete-node
      "r" 'neotree-rename-node
      "R" 'neotree-change-root
      "c" 'neotree-create-node
      "C" 'neotree-copy-node
      "v" 'neotree-enter-vertical-split
      "h" 'neotree-enter-horizontal-split
      "a" 'neotree-enter-ace-window
      "SPC" 'neotree-quick-look
      "TAB" 'neotree-enter
      "RET" 'neotree-enter
      "q" 'neotree-hide
      ))

  (use-package image-mode
    :defer 6
    :config
    (nvmap :status '(normal emacs)
      :keymaps '(image-mode-map)
      "n" 'image-next-file
      "p" 'image-previous-file
      "h" 'image-transform-fit-to-height
      "w" 'image-transform-fit-to-width
      "s" 'image-transform-reset
      "r" 'image-rotate
      ))

  (use-package counsel
    :defer 3
    :init
    (setq ivy-use-virtual-buffers t
	  ivy-count-format "(%d/%d) "
	  ivy-height 20
	  ivy-extra-directories nil
	  enable-recursive-minibuffers t)
    :config 
    (ivy-mode 1)
    (ivy-set-actions
     'counsel-find-file
     '(("D" delete-file "delete")
       ("e" sth-open-in-wsl "wsl")
       ("f" open-file-browse "open in file browse")
       ("g" gbash "open in git-bash")))
    (ivy-set-actions
     'open-file-application
     '(("d" dired "dired")
       ("D" delete-file "delete")))
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

  (use-package company
    :defer 3
    :init
    (global-company-mode 1)
    (setq company-idle-delay 0.1
	  company-minimum-prefix-length 1)
    :hook(after-init-hook . global-company-mode)
    :config
    (nvmap
      :states '(insert)
      "C-n" 'company-select-next
      "C-p" 'company-select-previous))

  (use-package hungry-delete
    :defer 3
    :config
    (global-hungry-delete-mode))

  (use-package org
    :defer 3
    :init
    (setq
     org-src-fontify-natively t
     org-log-done 'time
     org-agenda-files '("~/org/")
     org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)")
			 (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
			 (sequence "DELAY(l)" "|" "CANCELED(c)")
			 (sequence "|" "NOTE(n)"))
     org-confirm-babel-evaluate nil
     org-agenda-include-diary t))

  (use-package smartparens-config
    :defer 5
    :config
    (show-paren-mode)
    (smartparens-global-mode)
    (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "'" nil :actions nil))

  (use-package which-key
    :config
    (which-key-mode 1))

  (use-package window-numbering
    :config
    (window-numbering-mode 1))

  (use-package popwin
    :config
    (popwin-mode 1))

  (use-package dired-x
    :defer 3)
  (use-package dired
    :defer 3
    :init
    (setq dired-recursive-deletes 'always
	  dired-recursive-copies 'always
	  dired-dwim-target t)
    :config
    (put 'dired-find-alternate-file 'disabled nil)
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
    (define-key dired-mode-map (kbd "C-o") (lambda () (interactive) (progn (w32-shell-execute "open" (dired-filename-at-point))(message "open: %s" (dired-filename-at-point)))))
    )

  (use-package ace-window
    :defer 2)

  (use-package projectile
    :defer 3
    :init
    (setq projectile-completion-system 'ivy)
    :config
    (projectile-mode))

  (use-package magit
    :disabled
    :init
    (keychain-refresh-environment)
    (setq magit-completing-read-function 'ivy-completing-read))

  (use-package quickrun
    :defer 3
    :config
    (nvmap :status '(normal emacs)
      :keymaps 'quickrun--mode-map
      "q" 'quit-window
      "k" 'quickrun--kill-running-process
      ))

  (use-package paredit
    :defer 6)

#+END_SRC
** Custom Functions
*** adb functions and menu 
#+BEGIN_SRC emacs-lisp

  (defun adb-home ()
    (interactive)
    (w32-shell-execute "open" "adb" " shell input keyevent 3 " 0))

  (defun adb-back ()
    (interactive)
    (w32-shell-execute "open" "adb" " shell input keyevent 4 " 0))

  (defun adb-input()
    (interactive)
    (let ((input (read-string "inupt string: ")))
      (w32-shell-execute "open" "adb" (concat "shell input text " (replace-regexp-in-string " " "%s" input)) 0)))

  (defun adb-sigle-del()
    (interactive)
    (w32-shell-execute "open" "adb" " shell input keyevent 67 " 0))

  (defun adb-mult-del()
    (interactive)
    (dotimes (number 10)
      (w32-shell-execute "open" "adb" " shell input keyevent 67 " 0)))

  (defun adb-enter()
    (interactive)
    (w32-shell-execute "open" "adb" " shell input keyevent 66 " 0))

  (defun adb-next()
    (interactive)
    (w32-shell-execute "open" "adb" " shell input keyevent 61 " 0))

  (defun adb-cmd()
    (interactive)
    (let ((input (read-string "input string: ")))
      (w32-shell-execute "open" "adb" (concat " shell " input) 0)))

  (defun adb-input-enter()
    "input adb text and enter"
    (interactive)
    (adb-input)
    (adb-enter))

  (defun adb-cycle-input-enter()
    "cycle input and enter"
    (interactive)
    (adb-input)
    (adb-enter)
    (adb-input))

  (define-key-after
    global-map
    [menu-bar mymenu]
    (cons "ADB" (make-sparse-keymap ""))
    'tools)

  (define-key
    global-map
    [menu-bar mymenu  input]
    '("Input" . adb-input))

  (define-key
    global-map
    [menu-bar mymenu back]
    '("Back" . adb-back))

  (define-key
    global-map
    [menu-bar mymenu  home]
    '("Home" . adb-home))

  (define-key
    global-map
    [menu-bar mymenu  cmd]
    '("Cmd" . adb-cmd))
  ;;(menu-bar-mode -1)

#+END_SRC
*** my functions
#+BEGIN_SRC emacs-lisp
  (defun my-config-file ()
    "open my config file , it's refer to stanhe.org"
    (interactive)
    (find-file "~/.emacs.d/stanhe.org"))

  (defun my-test-file ()
    "open test file,contain some new test features"
    (interactive)
    (find-file "~/.emacs.d/lisp/my-test.el"))

  (defun back-to-previous-buffer ()
    "go back to previous buffer!"
    (interactive)
    (switch-to-buffer nil))

  (define-advice show-paren-function (:around (fn) fix-show-paren-function)
    "Highlight enclosing parens."
    (cond ((looking-at-p "\\s(") (funcall fn))
	  (t (save-excursion
	       (ignore-errors (backward-up-list))
	       (funcall fn)))))

  (defun show-me-the-colors ()
    "show all themes,interval 3s!"
    (interactive)
    (loop do
	  (random-color-theme)
	  (unless (sit-for 3)
	    (keyboard-quit))))

  (defun random-color-theme ()
    "Random color theme."
    (interactive)
    (unless (featurep 'counsel) (require 'counsel))
    (let* ((available-themes (mapcar 'symbol-name (custom-available-themes)))
	   (theme (seq-random-elt available-themes)))
      (counsel-load-theme-action theme)
      (message "Color theme [%s] loaded." theme)))

  (defun sth-theme-by-time ()
    "choose the theme by time now."
    (interactive)
    (let ((now (string-to-number (format-time-string "%H"))))
      (cond ((< now 12) (load-theme 'sanityinc-tomorrow-blue 1))
	    ((< now 18) (load-theme 'sanityinc-tomorrow-eighties 1))
	    (t (load-theme 'sanityinc-tomorrow-night 1)))))

  (defun init-my-load-path()
    "add lisp/ load path"
    (dolist (path (directory-files my-lisp-path t "[^.]"))
      (when (file-directory-p path)
	(add-to-list 'load-path path))))

  (defun open-file-browse (dir)
    "open window file browse in current directory"
    (interactive (list (if current-prefix-arg
			   (file-name-as-directory (read-directory-name " Input Directory to open folder: " default-directory))
			 default-directory)))
    (browse-url-of-file dir))

  (defun sth-open-win-application ()
    "start my application with w32, with prefix to input custom directory."
    (interactive)
					  ;(setq debug-on-error t)
    (let* ((default-desk (concat "c:/Users/" user-login-name "/desktop"))
	   (admain-desk "c:Users/Administrator/desktop")
	   (desktop (if (file-directory-p default-desk)
			default-desk
		      admain-desk))
	   (custom-app-dir (if (and custom-open-win-apps-dir (file-exists-p custom-open-win-apps-dir) (not current-prefix-arg))
			       custom-open-win-apps-dir
			     desktop)))
      (ivy-read "Open application: "
		#'read-file-name-internal
		:matcher #'counsel--find-file-matcher
		:initial-input custom-app-dir
		:action (lambda (name) (w32-shell-execute "open"  name ))
		:preselect (counsel--preselect-file)
		:require-match 'confirm-after-completion
		:history 'file-name-history
		:caller 'open-file-application
		)))

  (defun shut-down-win ()
    "shut down my computer."
    (interactive)
    (setq current-prefix-arg '(4))
    (call-interactively 'save-some-buffers)
    (w32-shell-execute "open" "c:/Windows/System32/shutdown.exe" " -s -t 3 -c \"See you stan.\""))

  ;; my config file
  (defun show-my-okr ()
    "open my okr file!"
    (interactive)
    (find-file "~/org/OKR.org"))
  ;; my okr file
  (defun show-my-gtd ()
    "open my GTD file!"
    (interactive)
    (find-file "~/org/2020.org"))

  (defun find-desk-file()
    "find file on my desk for win!"
    (interactive)
    (let* ((default-desk (concat "c:/Users/" user-login-name "/desktop"))
	   (admain-desk "c:Users/Administrator/desktop")
	   (desktop (if (file-directory-p default-desk)
			default-desk
		      admain-desk)))
      (counsel-find-file desktop)))

  (defun gbash(dir)
    "open git bash,need set `custom-git-bash-path' first."
    (interactive
     (list(if current-prefix-arg
	      (let ((val (prefix-numeric-value current-prefix-arg)))
		(cond
		 ((eq val 1)(file-name-as-directory (read-directory-name "Project Desktop: " (concat "c:/Users/" user-login-name "/Desktop/"))))
		 ((eq val 2)(file-name-as-directory (read-directory-name "Project Android: " (concat "c:/Users/" user-login-name "/Projects/"))))
		 ((eq val 3)(file-name-as-directory (read-directory-name "Project MiniProgram: " (concat "c:/Users/" user-login-name "/WeChatProjects/"))))
		 (t default-directory)
		 ))
	    default-directory
	    )))
    (w32-shell-execute "open" (concat custom-git-bash-path "git-bash.exe") (concat "--cd=" dir)))

  (defun milliseconds (cTime)
    "format milliseconds to Y-m-d H:M:S"
    (format-time-string "%Y-%m-%d %H:%M:%S" (seconds-to-time (/ cTime 1000))))

  (defun eval-current-line()
    "eval current line"
    (interactive)
    (save-excursion
      (end-of-line)
      (call-interactively 'eval-last-sexp)))

  (defun sth-inner-git-bash ()
    "open git-bash in emacs!"
    (interactive)
    (let ((explicit-shell-file-name (concat custom-git-bash-path "bin/bash.exe" ))
	  (prefer-coding-system 'utf-8)
	  (shell-command-switch "-ic")
	  (explicit-bash.exe-args '("--login" "-i")))
      (call-interactively 'shell)))

  (defun get-current-directory (&optional buffer)
    "get current directory."
    (if buffer
	(with-current-buffer buffer
	  (file-name-directory (or (buffer-file-name) default-directory)))
      (file-name-directory (or (buffer-file-name) default-directory))))

  (defun sth-fast-bash ()
    "fast forward to git-bash need function `sth-inner-git-bash' and var `custom-git-bash-path'"
    (interactive)
    (let* ((shell-name "*git-bash*")
	   (buffer (current-buffer))
	   (shell (get-buffer shell-name))
	   (dir (get-current-directory buffer)))
      ;;check if my-full-eshell exist,if not create one.
      (unless shell
	(setq shell (sth-inner-git-bash))
	(with-current-buffer shell
	  (rename-buffer shell-name)))
      ;;check and handle swap.
      (if (equal shell-name (buffer-name buffer))
	  (let ((length (length (mapcar #'window-buffer (window-list)))))
	    (if (> length 1)
		(delete-window)
	      (back-to-previous-buffer)))
	(if (setq exist-window (get-buffer-window shell-name 'A))
	    (select-window exist-window)
	  (switch-to-buffer shell)))))

  (defmacro sth-loading(seconds msg &optional action)
    "my custom loading."
    `(dotimes-with-progress-reporter
	 (k (* ,seconds 100) (when ,action ,action))
	 ,msg
       (sit-for 0.01)))

  (defun sth-idate()
    "insert current date"
    (interactive)
    (insert (format-time-string "%Y-%m-%d")))

  (defun sth-eshell-clear ()
    "clear buffer of eshell."
    (interactive)
    (let ((eshell-buffer-maximum-lines 0))
      (eshell-truncate-buffer)))

  (defun eshell/_ec ()
    "clear buffer of eshell."
    (interactive)
    (funcall 'sth-eshell-clear))

  (defun sth-copy-word()
    "copy word at point."
    (interactive)
    (save-excursion
      (let ((start (progn (backward-word)(point)))(end (progn (forward-word) (point))))
	(evil-yank start end))))

  (defun sth-read-lines (filePath)
    "Return a list of lines of a file at filePath."
    (with-temp-buffer
      (insert-file-contents filePath)
      (split-string (buffer-string) "\n" t)))

  (defun sth-set-map-path()
    "set sth-map-paths"
    (interactive)
    (let* ((p1 (concat "c:/Users/" user-login-name "/Software/tools/.mcd_path"))
	   (p2 (concat "c:/Users/" user-login-name "/tools/.mcd_path"))
	   (sth-map-path
	    (cond
	     ((file-exists-p p1) p1)
	     ((file-exists-p p2) p2)
	     (t nil))))
      (if sth-map-path 
	  (setq sth-map-paths (mapcar
			       (lambda (arg)(replace-regexp-in-string "\"" "" arg))
			       (sth-read-lines sth-map-path)))
	(setq sth-map-paths nil)
	)))

  (defun sth-find-file(dir)
    "my find file."
    (interactive
     (list(if current-prefix-arg
	      (let ((val (prefix-numeric-value current-prefix-arg)))
		(if sth-map-paths (some (lambda (arg)(if (= (string-to-number (car (split-string arg))) val) (nth 1 (split-string arg)) nil)) sth-map-paths)
		  default-directory)
		)
	    default-directory
	    )))
    (counsel-find-file dir))

  (defun sth-open-in-wsl(dir)
    "open file with wsl-terminal"
    (interactive (list (if current-prefix-arg
			   (file-name-as-directory (read-directory-name " Input Directory to open folder: " default-directory))
			 default-directory)))
    ;;(message "==> path is: %s" dir)
    (w32-shell-execute "open" "open-wsl" (concat "-W " (if (file-directory-p dir)
							   dir
							 (file-name-directory dir)))))

#+END_SRC
*** cover with better keybindings
#+BEGIN_SRC emacs-lisp
  ;;(global-set-key (kbd "<f5>") 'org-agenda-list)
  (global-set-key (kbd "<f9>") 'delete-other-windows)
  (global-set-key (kbd "C-h") 'delete-backward-char)
  (global-set-key (kbd "C-SPC") 'delete-window)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "<C-return>") (lambda ()
				      (interactive)
				      (progn (end-of-line) (newline-and-indent))))
#+END_SRC

