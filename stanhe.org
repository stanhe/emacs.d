* Emacs 配置
** 基础配置文件
*** 界面及保存
#+BEGIN_SRC emacs-lisp
;; base config
(menu-bar-mode -1)
(tool-bar-mode -1)
(global-linum-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)
(setq inhibit-splash-screen -1)
(setq auto-save-default nil)
(setq make-backup-files nil)
#+END_SRC
** 我的配置文件
*** 打开我的配置文件
 #+BEGIN_SRC emacs-lisp
(defun my-config-file ()
  (interactive)
  (find-file "~/.emacs.d/stanhe.org"))
 #+END_SRC
*** 绑定配置文件快捷键
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") `my-config-file)
#+END_SRC
** 自定义Function
*** 优化已有快捷键及自定义功能
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h") 'delete-backward-char)
#+END_SRC
*** Function
#+BEGIN_SRC emacs-lisp
(defun back-to-previous-buffer ()
       (interactive)
       (switch-to-buffer nil))
#+END_SRC
** 包管理及配置文件
*** 源管理
#+BEGIN_SRC emacs-lisp
;init packages
(when (>= emacs-major-version 24)
  (setq package-archives '(("gnu" . "http://elpa.emacs-china.org/gnu/")
			   ("melpa" . "http://elpa.emacs-china.org/melpa/"))))
#+END_SRC
*** 包管理
#+BEGIN_SRC emacs-lisp
(defvar stanhe/packages '(
                     use-package
                     neotree
                     ace-window
		     company
		     hungry-delete
		     swiper
		     counsel
		     evil
		     general
		     smartparens
		     which-key
		     window-numbering
		     popwin
		     monokai-theme
		     projectile
		     counsel-projectile
		     magit
                     gh-md
                     markdown-mode

		     ) "My default packages")

#+END_SRC
*** 包安装
#+BEGIN_SRC emacs-lisp
(require 'cl)

(setq package-selected-packages stanhe/packages)

(defun stanhe/packages-install-p ()
  (loop for pkg in stanhe/packages
	when (not (package-installed-p pkg)) do (return nil)
	finally (return t)))

(unless (stanhe/packages-install-p)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (pkg stanhe/packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))
#+END_SRC
    
*** 加载相关包配置
    按上面包添加顺序初始化
#+BEGIN_SRC emacs-lisp
(load-theme 'monokai 1)
(require 'use-package)

(use-package company
    :init
    (global-company-mode 1)
    :hook(after-init-hook . global-company-mode))

(use-package hungry-delete
    :config
    (global-hungry-delete-mode))

(use-package ivy
    :init
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    :config 
    (ivy-mode 1)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

(use-package smartparens
    :init
    (smartparens-global-mode t)
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    :hook(emacs-lisp-mode-hook . show-paren-mode))

(use-package which-key
    :config
    (which-key-mode 1))

(use-package window-numbering
    :config
    (window-numbering-mode 1))

(use-package popwin
    :config
    (popwin-mode 1))

(use-package dired
    :init
    (setq dired-recursive-deletes 'always)
    (setq dired-recursive-copies 'always)
    (setq dired-dwim-target t)
    :config
    (put 'dired-find-alternate-file 'disabled nil)
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
)

(use-package neotree
    :config
    (setq neo-smart-open t)
    :init
    (add-hook 'neotree-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
            (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))))

(use-package ace-window)

(use-package projectile
    :config
    (projectile-mode)
    (counsel-projectile-mode))

(use-package magit)

(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

(use-package gh-md)
#+END_SRC
*** vm快捷键设置
#+BEGIN_SRC emacs-lisp

(use-package evil
    :init
    (general-evil-setup t)
    :config 
    (evil-mode 1)
    (nvmap :prefix ","

	"p" 'projectile-command-map
	"x1" 'delete-other-windows
	"x0" 'delete-window
	"xq" 'delete-window
	"x2" 'split-window-below
	"x3" 'split-window-right
	"xf" 'counsel-find-file
	"xm" 'counsel-M-x
	"xr" 'counsel-recentf
	"xb" 'ivy-switch-buffer
	"bb" 'back-to-previous-buffer
	"xB" 'list-buffers
	"xd" 'dired
	"xs" 'save-buffer
	"xc" 'save-buffers-kill-terminal
	"xk" 'kill-buffer
	"xe" 'eval-last-sexp

	"aw" 'ace-swap-window
	"ff" 'find-function
	"eb" 'eval-buffer
	"cg" 'counsel-git
	"oa" 'org-agenda

	"nf" 'neotree-find
	"nt" 'neotree-toggle
	"nh" 'neotree-hide
	"ns" 'neotree-hidden-file-toggle
	"ng" 'neotree-refresh
	"nd" 'neotree-delete-node
	"nr" 'neotree-rename-node
	"nc" 'neotree-create-node
	"sv" 'neotree-enter-vertical-split
	"sh" 'neotree-enter-horizontal-split
	"gs" 'magit-status

    ))

#+END_SRC
** Custom Settings
   保存custom-group 相关配置
#+BEGIN_SRC emacs-lisp
;;custom settings
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-idle-delay 0.1)
 '(company-minimum-prefix-length 1))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
